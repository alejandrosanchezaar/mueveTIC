package com.MueveTic.app.Services;

import com.MueveTic.app.Repositories.AdminDAO;
import com.MueveTic.app.Repositories.BookingDAO;
import com.MueveTic.app.Repositories.ConfigParamsDAO;
import com.MueveTic.app.Repositories.PersonalMantDAO;
import com.MueveTic.app.Repositories.UserDAO;
import com.MueveTic.app.Utils.Utilities;
import com.MueveTic.app.Entities.Admin;
import com.MueveTic.app.Entities.Booking;
import com.MueveTic.app.Entities.ConfigParams;
import com.MueveTic.app.Entities.PersonalMant;
import com.MueveTic.app.Entities.User;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.management.InvalidAttributeValueException;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AdminService {

	@Autowired
	private UserDAO userRepository;
	@Autowired
	private AdminDAO adminRepository;
	@Autowired
	private PersonalMantDAO personalMantRepository;
	@Autowired
	private ConfigParamsDAO paramsRepository;
	@Autowired
	private BookingDAO bookingRepository;
	@Autowired
	private PasswordEncoder passwordEncoder;
	private Utilities utils = new Utilities();
	
	public List<User> consultUsers() {
		return this.userRepository.findAll();
	}
	public List<Admin> consultAdministrators() {
		return this.adminRepository.findAll();
	}
	
	public List<PersonalMant> consultMantenance() {
		return this.personalMantRepository.findAll();
	}
	
	public boolean isActive(String email) {
		Boolean result = false;
		Optional<Admin> user = this.adminRepository.findByEmail(email);
		if(user.isPresent() && user.get().getValidation() == 1) {
			result = true;
		}
		return result;
	} 
	
	public void deactivate(String email) {
		var admin = this.adminRepository.findByEmail(email);
		if (admin.isPresent() && (admin.get().getValidation() == 1)) {
			admin.get().setValidation((byte) 0);
			this.adminRepository.save(admin.get());
		}
	}
	
	public void activate(String email) throws Exception {
		email = utils.decryptText(email);
		var admin = this.adminRepository.findByEmail(email);
		if (admin.isPresent() && (admin.get().getValidation() == 0)) {
			admin.get().setValidation((byte) 1);
			this.adminRepository.save(admin.get());
		}	
	}
	
	public void resetPassword(String email, String password) {
		var admin = this.adminRepository.findByEmail(email);
		if (admin.isPresent() && (admin.get().getValidation() == 1)) {
			admin.get().setPassword(passwordEncoder.encode(password));
			this.adminRepository.save(admin.get());
		}else {
			throw new UsernameNotFoundException("Email not found: " + email);
		}
	}
	
	public void update(JSONObject jso) throws InvalidAttributeValueException {
		var admin = this.adminRepository.findByEmail(jso.get("email").toString());
		if(admin.isPresent()) {
			Admin newAdmin = admin.get();
			try {
				newAdmin.setName(jso.get("name").toString());
				newAdmin.setSurname(jso.get("surname").toString());
				newAdmin.setDni(jso.get("dni").toString());
				newAdmin.setPassword(jso.get("password").toString());
				newAdmin.setCity(jso.get("city").toString());
				this.adminRepository.save(newAdmin);
			} catch (InvalidAttributeValueException e) {
				throw new InvalidAttributeValueException("Wrong attribute format"); 
			}
		}else {
			throw new UsernameNotFoundException("Email not found: " + jso.get("email").toString());
		}
	}
	
	public List<User> consultReviews(String vehicleModel) {
		List<User> result = new ArrayList<>();
		List<Booking> bookings = this.bookingRepository.findAll();
		for(Booking booking : bookings) {
			if(booking.getVehicle().getModel().equals(vehicleModel)) {
				result.add(booking.getUser());
			}
		}
		return result;
	}
	
	public List<Booking> consultUserBooking(String email, String vehicleModel) {
		List<Booking> result = new ArrayList<>();
		List<Booking> bookings = this.bookingRepository.findByUser(this.userRepository.findByEmail(email).get());
		for(Booking booking : bookings) {
			if(booking.getVehicle().getModel().equals(vehicleModel)) {
				result.add(booking);
			}
		}
		return result;
	}
	
	public ConfigParams consultParams(int id) {
		Optional<ConfigParams> params = this.paramsRepository.findById(id);
		if(params.isPresent()) {
			return params.get();
		}
		return null;
	}
	
	public void updateParams(JSONObject jso) {
		Optional<ConfigParams> params = this.paramsRepository.findById(1);
		if(params.isPresent()) {
			ConfigParams newParams = params.get();
			newParams.setMinBatteryPerTrip(Integer.parseInt(jso.get("minBatteryPerTrip").toString()));
			newParams.setMaxVehiclesCharging(Integer.parseInt(jso.get("maxVehiclesCharging").toString()));
			newParams.setFacturationPerTrip(Integer.parseInt(jso.get("facturationPerTrip").toString()));
			newParams.setBatteryPerTrip(Integer.parseInt(jso.get("batteryPerTrip").toString()));
			this.paramsRepository.save(newParams);
		}
	}
}